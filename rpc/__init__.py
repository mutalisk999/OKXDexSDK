#!/usr/bin/env python
# encoding: utf-8

import asyncio
from typing import Optional
from web3 import AsyncWeb3


async def check_allowance(_node_url: str, _token_addr: str, _owner_addr: str, _spender_addr: str) -> Optional[int]:
    token_abi = [
        {
            "constant": True,
            "inputs": [
                {"name": "_owner", "type": "address"},
                {"name": "_spender", "type": "address"}
            ],
            "name": "allowance",
            "outputs": [{"name": "", "type": "uint256"}],
            "payable": False,
            "stateMutability": "view",
            "type": "function"
        }
    ]

    w3 = AsyncWeb3(AsyncWeb3.AsyncHTTPProvider(_node_url))
    connected = await w3.is_connected()
    if not connected:
        return None

    contract = w3.eth.contract(
        address=AsyncWeb3.to_checksum_address(_token_addr),
        abi=token_abi
    )

    _owner_addr = AsyncWeb3.to_checksum_address(_owner_addr)
    _spender_addr = AsyncWeb3.to_checksum_address(_spender_addr)

    res = await contract.functions.allowance(_owner_addr, _spender_addr).call()
    return res


async def estimate_gas(_node_url: str, _to_addr: str, _from_addr: str, _value: int, _data: bytes) -> Optional[int]:
    w3 = AsyncWeb3(AsyncWeb3.AsyncHTTPProvider(_node_url))
    connected = await w3.is_connected()
    if not connected:
        return None

    gas_limit = await w3.eth.estimate_gas({
        'from': AsyncWeb3.to_checksum_address(_from_addr),
        'to': AsyncWeb3.to_checksum_address(_to_addr),
        'value': w3.to_wei(_value, 'wei'),
        'data': _data,
    })

    return gas_limit


async def check_nonce(_node_url: str, _from_addr: str) -> Optional[int]:
    w3 = AsyncWeb3(AsyncWeb3.AsyncHTTPProvider(_node_url))
    connected = await w3.is_connected()
    if not connected:
        return None

    nonce = await w3.eth.get_transaction_count(AsyncWeb3.to_checksum_address(_from_addr))
    return nonce


async def build_and_sign_transaction(_node_url: str, _from_addr: str, _to_addr: str, _value: int, _data: bytes,
                                     _gas_price: int, _gas_limit: int, _nonce: int, _chain_id: int,
                                     _private_key: bytes) -> Optional[str]:
    w3 = AsyncWeb3(AsyncWeb3.AsyncHTTPProvider(_node_url))
    connected = await w3.is_connected()
    if not connected:
        return None

    tx = {
        "from": AsyncWeb3.to_checksum_address(_from_addr),
        "to": AsyncWeb3.to_checksum_address(_to_addr),
        "data": _data,
        "value": _value,
        "gas": _gas_limit,
        "gasPrice": _gas_price,
        "nonce": _nonce,
        "chainId": _chain_id,
    }

    signed_tx = w3.eth.account.sign_transaction(tx, private_key=_private_key)
    return signed_tx


if __name__ == "__main__":
    url = "https://public-bsc.nownodes.io"
    # token_addr = "0x55d398326f99059ff775485246999027b3197955"
    # owner_addr = "0x429752d5f5b595340381b158d80e846f9b20b6da"
    # spender_addr = "0x2c34a2fb1d0b4f55de51e1d0bdefaddce6b7cdd6"

    token_addr = "0xb1b5d6ae7cb737357766e924d11793f0dc4d4444"
    owner_addr = "0x429752d5f5b595340381b158d80e846f9b20b6da"
    spender_addr = "0x5c952063c7fc8610ffdb798152d69f0b9550762b"


    async def func1(_url, _token_addr, _owner_addr, _spender_addr):
        r = await check_allowance(_url, _token_addr, _owner_addr, _spender_addr)
        return r


    async def func2(_url, _token_addr, _owner_addr):
        data = "095ea7b30000000000000000000000005c952063c7fc8610ffdb798152d69f0b9550762b00000000000000000000000000000000000000000000898a57ccc69947eb4300"
        r = await estimate_gas(_url, _token_addr, _owner_addr, 0, bytes.fromhex(data))
        return r


    async def func3(_url, _owner_addr):
        r = await check_nonce(_url, _owner_addr)
        return r


    async def func4(_url, _token_addr, _owner_addr):
        data = "b80c2f090000000000000000000000000000000000000000000000000000000000033327000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000000000000094db7f8640000000000000000000000000000000000000000000000000000000068d4ff4000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000078000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000010000000000000000000000001d27ad3613e84e201bc87929590f95e75454cdc000000000000000000000000000000000000000000000000000000000000000010000000000000000000000001d27ad3613e84e201bc87929590f95e75454cdc00000000000000000000000000000000000000000000000000000000000000001000000000000000000002710a540ec8c73322200d68e1b86c471a5c850854f220000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d1a34369686ae59ac97ae4e1df5635ffda9ee7c000000000000000000000000129b3d9a0a6e4beab88f5cb1e57995d72a6e24f10000000000000000000000001d27ad3613e84e201bc87929590f95e75454cdc0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000000000000000000959afe3c5000000000000000000000000000000000000000000000000000000094db7f8640000000000000000000000000000000000000000000000000000000068d4f16c000000000000000000000000000000000000000000000000391d9569362ded6d0000000000000000000000000000000000000000000000000000000068d4f1380000000000000000000000000000000000000000000000000000000068d4f16a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000321245d737d36a49b4a0bd742719b3dace00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000000000000006044eef7179034319e2c8636ea885b37cbfa9aba0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000415e9357f6dfddfae73ec4a4e6af17f1587f950fadc3a6feb610a87983852b508c13287f12c1546372499ca44ad800541b256ad256706dcdf8ecdc9522e1f5d9b21c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000415eec8abd42eabc2f1c976d2b61fe3b50e3550ab562ee2a8fa99d7c6aa9a2c1d21c8a7be1d72f12459bc7c34846d4e2b278a950f903bf7acda3134106953f96ee1c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        r = await build_and_sign_transaction(_url, "0x19E7E376E7C213B7E7e7e46cc70A5dD086DAff2A", token_addr, 0,
                                             bytes.fromhex(data), 10 ** 9,
                                             200000, 15, 56,
                                             bytes.fromhex(
                                                 "1111111111111111111111111111111111111111111111111111111111111111"))
        return r


    async def func():
        fut1 = func1(url, token_addr, owner_addr, spender_addr)
        fut2 = func2(url, token_addr, owner_addr)
        fut3 = func3(url, owner_addr)
        fut4 = func4(url, token_addr, owner_addr)

        r1, r2, r3, r4 = await asyncio.gather(fut1, fut2, fut3, fut4)
        print(r1)
        print(r2)
        print(r3)
        print(r4)


    asyncio.run(func())
